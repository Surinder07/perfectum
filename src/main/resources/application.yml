spring:
  profiles:
    active:
    default: dev
  application:
    name: ^project.name^
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
  config:
    import: classpath:apiinfo.yml
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
    show-sql: false
  liquibase:
    enabled: false
    change-log: classpath:db/changelog/db.changelog-master.yml
  messages:
    basename: i18n/messages
  thymeleaf:
    mode: HTML5
    prefix: classpath:/templates/
    suffix: .html
  mail:
    host: smtp.gmail.com
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
          starttls:
            enable: true

server:
  port: 8080
  error:
    whitelabel:
      enabled: false

logging:
  level:
    liquibase: info

########################################
#####    Swagger Configurations    #####
########################################
swagger:
  title: WAAW APIs Collection
  version: 1.0.0
  description: |
    ### WAAW Api reference for developers.
    ##### Web-sockets are setup in the application, you can connect to websocket with the **jwt token** passed in headers as **access_token** and subscribe to the available services.

    | Service               | Endpoint                                                       |
    | --------------------- | ---------------------------------------------------------------|
    | Connect to web-socket | **"Backend URL"${application.websockets.connection-endpoint}** |
    | Notification Service  | **/user${application.websockets.notification-url}**            |

springdoc:
  packagesToScan: ca.waaw.web.rest
  swagger-ui:
    operationsSorter: alpha
    tagsSorter: alpha

#################################################
#####    Application specific properties    #####
#################################################
application:
  title: ^project.name^
  version: ^project.version^
  validations:
    regex:
      # Minimum eight characters, at least one uppercase letter, one lowercase letter,
      # one number and one special character.
      password: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
      # Username consists of alphanumeric characters (a-zA-Z0-9), lowercase or uppercase.
      # Username allowed of the dot (.), underscore (_), and hyphen (-).
      # The dot (.), underscore (_), or hyphen (-) must not be the first or last character.
      # The dot (.), underscore (_), or hyphen (-) does not appear consecutively, e.g., java..regex
      # The number of characters must be between 5 and 20.
      username: ^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$
      email: ^[\w-\+]+(\.[\w]+)*@[\w-]+(\.[\w]+)*(\.[a-zA-Z]{2,})$
  urls:
    activate-account: /api/v1/unAuth/activateAccount?key=
    reset-password: /resetPassword?key=
    invite-user: /api/v1/unAuth/acceptInvitation?key=
    registration: /register
    login: /login
  validity:
    activation-link: 3
    password-reset: 1
    user-invite: 2
  #Admin and support email info
  mail:
    twitter-url: https://twitter.com/waaw
    linkedin-url: https://www.linkedin.com/company/waaw
    admin-email: akhil@pragra.io
    sender-email: akhil@pragra.io
    sender-name: Pragra
  super-user:
    first-name: Super
    last-name: User
    email: superuser@localhost.ca
    username: waaw2020
    password: Waaw@2020
    organization: WAAW
  triggers:
    location: classpath:db/sqltriggers/
  websockets:
    connection-endpoint: /ws-connect
    simple-broker: /ws-server
    application-destination-prefix: /ws
    allowed-origins: ${security.cors-allowed-origins}
    notification-url: ${application.websockets.simple-broker}/notification