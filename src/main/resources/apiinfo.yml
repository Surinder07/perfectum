##############################################################
#### All API information, like endpoints and swagger info ####
##############################################################
api:
  date-format: yyyy/MM/dd
  time-format: 24 hours (HH:MM)
  endpoints:
    authentication: /v1/unAuth/authenticate
    user:
      checkUsername: /v1/unAuth/checkUserNameExistence
      registerOrganization: /v1/unAuth/registerAdmin
      registerUser: /v1/unAuth/registerUser
      resetPasswordInit: /v1/unAuth/resetPassword/init
      resetPasswordFinish: /v1/unAuth/resetPassword/finish
      activateAccount: /v1/unAuth/activateAccount
      acceptInvitation: /v1/unAuth/acceptInvitation
      updateUser: /v1/updateUser
      updatePassword: v1/updatePassword
      updateProfileImage: /v1/updateProfileImage
      getUserDetails: /v1/getAccount
    organization:
      updateOrganizationPreferences: /v1/organization/update
      getHolidays: /v1/organization/holiday/getAll
      addHolidaysExcel: /v1/organization/holiday/upload
      addHoliday: /v1/organization/holiday/add
      editHoliday: /v1/organization/holiday/edit
      deleteHoliday: /v1/organization/holiday/delete
    member:
      sendInvite: /v1/member/sendInvite
      getAllUsers: /v1/member/getAll
      listAllUsers: /v1/member/listAll
      addEmployeePreferences: /v1/member/addPreference
    dropdown:
      getTimezones: /vi/unAuth/timezone/get
    notification:
      getAllNotification: /v1/notifications/getAll/{pageNo}/{pageSize}
      markNotificationAsRead: /v1/notifications/markAsRead
      markAllNotificationAsRead: /v1/notifications/markAllAsRead
      deleteNotification: /v1/notifications/delete
    location-and-role:
      getLocation: /v1/location/get
      addLocation: /v1/location/save
      deleteLocation: /v1/location/delete
      addLocationRole: /v1/location/role/save
      deleteLocationRole: /v1/location/role/delete
      getLocationRole: /v1/location/role/get
      updateLocationRole: /v1/location/role/update
    shift-management:
      createShift: /v1/shifts/create
      updateShift: /v1/shifts/update
      deleteShift: /v1/shifts/delete
      assignShift: /v1/shifts/assign
      claimShift: /v1/shifts/claim
      approveShift: /v1/shifts/approve
      getAllShifts: /v1/shifts/getAll/{pageNo}/{pageSize}
      createRecurringShift: /v1/recurringShifts/create
      updateRecurringShift: /v1/recurringShifts/update
      deleteRecurringShift: /v1/recurringShifts/delete
      assignRecurringShift: /v1/recurringShifts/assign
      claimRecurringShift: /v1/recurringShifts/claim
      approveRecurringShift: /v1/recurringShifts/approve
      getAllRecurringShifts: /v1/recurringShifts/getAll/{pageNo}/{pageSize}
  description:
    authentication: |
      Authenticate login and password to get a jwt token.
      * After trial period is expired and no payment is done. Only Admin will be able to log-in to their account.
        * Only getAccount API will be accesible to admin, that can be used to fetch details to initiate a payment.
      * For any other role or other APIs for admin an error will be thrown.
    user:
      checkUsername: Will Return Success only if given username is available.
      registerUser: |
        Register a new user **(by email invite only)**.
        ${regex.table}
      registerOrganization: |
        Register a new user **(admin)** with an organization.
        ${regex.table}
      updateUser: Update logged in user details.
      updatePassword: Update current password using the old password.
      resetPasswordInit: Initialize a password reset request and get email to reset password.
      resetPasswordFinish: Finish password reset request with key received on email.
      updateProfileImage: Update profile image for logged in user ***(Not operational right now)***.
      getUserDetails: Get Logged in user's account details.
      updateOrganizationPreferences: Update organization preferences under logged-in admin
    organization:
      updateOrganizationPreferences: Update organization preferences under logged-in admin
      getHolidays: Get all Holidays for current year.
      addHolidaysExcel: Upload excel with required data, to update all holidays at once. Pass locationId only if holidays are location specific. **Use Form Data.**
      addHoliday: Add a single holiday manually.
      editHoliday: Edit a holiday.
      deleteHoliday: Delete a holiday.
    member:
      sendInvite: Invite new users to join logged in admins organization.
      getAllUsers: Get all Employees and Admins under logged-in user.
      listAllUsers: |
        Get all Users under one locationId with search.
        This API can be used for populating a drop-down while **scheduling shifts**
      addEmployeePreferences: Update employee preferences
    dropdown:
      getTimezones: Get a list of timezone to show for adding new location.
    notification:
      getAllNotification: Get all notifications, Page numbers start with 0.
      markNotificationAsRead: Mark notification with given id as read.
      markAllNotificationAsRead: Mark all notifications as read.
      deleteNotification: Delete a notification.
    location-and-role:
      getLocation: Api to get information about location and roles under them.
      addLocation: Adds a new location under logged in admins organization.
      deleteLocation: Deletes the location with given Id and suspends the account of related users.
      addLocationRole: Adds a new location role under logged in admins organization.
      deleteLocationRole: Deletes the location role with given Id and suspends the account of related users.
      getLocationRole: Api to get information about location roles.
      updateLocationRole: Update a location role under logged in admins organization.
    shift-management:
      createShift: Create a new shift (assigned or unassigned).
      updateShift: Update any shift under your authorization.
      deleteShift: Delete an existing shift.
      assignShift: Assign an existing shift to an user.
      claimShift: Claim an unassigned shift for the user.
      approveShift: Admin can applrove a claim to a shift by employee.
      getAllShifts: |
        Get all shifts under your authorization.
        Pass date only if a single date data is needed and pass endDate too if data between two days is needed.
        **Date format is ${api.date-format}**
      createRecurringShift: Create a new recurring shift (assigned or unassigned).
      updateRecurringShift: Update any recurring shift under your authorization.
      deleteRecurringShift: Delete an existing recurring shift.
      assignRecurringShift: Assign an existing recurring shift to an user.
      claimRecurringShift: Claim an unassigned recurring shift for the user.
      approveRecurringShift: Admin can applrove a claim to a recurring shift by employee.
      getAllRecurringShifts: Get all recurring shifts under your authorization.
  swagger:
    groups:
      auth: 1. Auth
      user: 2. User Management
      organization: 3. Organization Management
      member: 4. Members Management
      dropdown: 5. Dropdown
      notification: 6. Notifications
      location-and-role: 7. Location and Location Role
      shift-management: 8. Shift Management
    error-description:
      trial-over: Payment Required. If role is ADMIN redirect to payment page with error message or else just show the error.
      authentication: Authentication Failed.
      bad-request: Your request was not formed correctly.
      unauthorized: You are not authorized to access this resource.
      already-exist: The resoourse you are trying to create already exist.
      not-found: The resource you are trying to fetch or change was not found.
    schema-description:
      pagination: |
        Response will contain,
        - Total number of pages(totalPages)
        - Number of entries(totalEntries)
        - List of response(data)
      getLocation: |
        Different responses will be
        | Role                              | Response                                                     |
        |-----------------------------------|--------------------------------------------------------------|
        | ADMIN (Global Admin)              | A list of location will be returned                          |
        | MANAGER (Location Admin)          | Single location with list of location_roles will be returned |
        | EMPLOYEE (Employee)               | single location and single location_role will be returned    |
      getLocationRole: |
        Different responses will be
        | Role                              | Response                                                     |
        |-----------------------------------|--------------------------------------------------------------|
        | ADMIN (Global Admin)              | Location_role with list of users will be returned            |
        | MANAGER (Location Admin)          | Location_role with list of users will be returned            |
        | EMPLOYEE (Employee)               | Only location_role will be returned                          |
      getAllShifts: |
        ${api.swagger.schema-description.pagination}
        Different responses will be
        | Role                              | Response                                                                   |
        |-----------------------------------|----------------------------------------------------------------------------|
        | ADMIN (Global Admin)              | All shifts will be returned                                                |
        | MANAGER (Location Admin)          | All shifts will be returned                                                |
        | EMPLOYEE (Employee)               | Only shifts assigned to the employee and unassigned shift will be returned |
      getAllHolidays: |
        * For employees or manager, it will show all holidays assigned to their location and all unassigned ones (as they will be common for all locations)
        * For admin, it will show:
          * Groups with all locations and list of their holidays
          * **Null** location and a list of unassigned(common) holidays.
    param-description:
      getLocationRole: Required for ADMIN(Global admin) and MANAGER(Location admin) only.
      getUsersSearchKey: Pass the search key to search user by name or id.
      getUsersLocation: Pass the locationId to search under particular location.
      getUsersRole: Pass user role(ADMIN, MANAGER, EMPLOYEE) to show users with particular role.

regex:
  explaination:
    email: xx@xx.xx
    username: <li>Username consists of alphanumeric characters (a-zA-Z0-9), lowercase or uppercase.</li><li>Username allowed of the dot (.), underscore (\_), and hyphen (-).</li><li>The dot (.), underscore (\_), or hyphen (-) must not be the first or last character.</li><li>The dot (.), underscore (\_), or hyphen (-) does not appear consecutively, e.g., java..regex</li><li>The number of characters must be between 5 and 20.</li>
    password: <li>Minimum eight characters.</li><li>at least one uppercase letter.</li><li>one lowercase letter.</li><li>one number.</li><li>one special character.</li>
  pattern:
    # We have repeated these here to add escape characters, so they will show properly on swagger
    email: <code>^[\w-\+]+(\.[\w]+)*@[\w-]+(\.[\w]+)*(\.[a-zA-Z]{2,})$</code>
    username: <code><span>^[a-zA-Z0-9]</span>([._-]<span>(?![._-])</span>&#x7c;[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$</code>
    password: <code>^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$</code>
  table: |
    We are using below given patterns for our valiadtions
    | Type            | Description                            | Regex                       |
    |-----------------|----------------------------------------|-----------------------------|
    | Email           | ${regex.explaination.email}            | ${regex.pattern.email}      |
    | Username        | ${regex.explaination.username}         | ${regex.pattern.username}   |
    | Password        | ${regex.explaination.password}         | ${regex.pattern.password}   |